 
name: tests
on:
  push:
    branches:
       - 'releases'
       - 'update-release-workflow' # matches every branch that doesn't contain a '/'      
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '7.0.x','8.0.x' ]
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        id: stepid
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          include-prerelease: true

      - name: Create temporary global.json
        run: |
          echo '{"sdk":{"version": "${{ matrix.dotnet-version }}"}}' > ./global.json
        shell: bash
      # You can test your matrix by printing the current dotnet version
      - name: Display dotnet version
        run: dotnet --version
      - name: Restore dependencies
        run: dotnet test
 
      - name: Build
        # build dotnet with output ./build.zip
        run: dotnet build --configuration Release -o ./Release #--no-restore #--output ./build.zip
        # Runs the specified script
        #echo pwd
      - name: Run a multi-line script
        run: |
           pwd
           ls -ali
           ls -ali ./Release
           # zip the build
           zip -r ./release.zip ./Release
          
          
       # Uploads the binaries to the release
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release.zip
          asset_name: build.zip
          tag: 'build-only-${{ matrix.dotnet-version }}'
          overwrite: true
          body: "Build of project ${{ steps.date.outputs.date }}"
            
       